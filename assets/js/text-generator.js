// Text Report Generator for Accessibility Analysis
class ReportGenerator {
  constructor(analysisData) {
    this.data = analysisData;
  }

  generateTextReport() {
    try {
      const summary = this.calculateSummary();
      const timestamp = new Date().toISOString();

      let report = `ACCESSIBILITY ANALYSIS REPORT\n`;
      report += `Generated: ${timestamp}\n`;
      report += `${"=".repeat(50)}\n\n`;

      report += `SUMMARY\n`;
      report += `Total Issues: ${summary.totalIssues}\n`;
      report += `Critical: ${summary.critical}\n`;
      report += `Serious: ${summary.serious}\n`;
      report += `Moderate: ${summary.moderate}\n`;
      report += `Minor: ${summary.minor}\n\n`;

      if (this.data.violations && this.data.violations.length > 0) {
        report += `DETAILED ISSUES\n`;
        report += `${"=".repeat(20)}\n\n`;

        this.data.violations.forEach((violation, index) => {
          report += `${index + 1}. ${violation.id}\n`;
          report += `   Impact: ${violation.impact}\n`;
          report += `   Description: ${violation.description}\n`;
          report += `   Help: ${violation.help}\n`;

          if (violation.helpUrl) {
            report += `   More Info: ${violation.helpUrl}\n`;
          }

          if (violation.nodes && violation.nodes.length > 0) {
            report += `   Affected Elements: ${violation.nodes.length}\n`;
            violation.nodes.forEach((node, nodeIndex) => {
              if (nodeIndex < 3) {
                // Limit to first 3 nodes
                report += `     - ${
                  node.target ? node.target.join(", ") : "Unknown element"
                }\n`;
              }
            });
            if (violation.nodes.length > 3) {
              report += `     ... and ${violation.nodes.length - 3} more\n`;
            }
          }
          report += `\n`;
        });
      }

      report += `RECOMMENDATIONS\n`;
      report += `${"=".repeat(20)}\n\n`;
      report += `1. Fix critical and serious issues first\n`;
      report += `2. Test with screen readers and keyboard navigation\n`;
      report += `3. Validate color contrast ratios\n`;
      report += `4. Ensure all interactive elements are accessible\n`;
      report += `5. Add proper ARIA labels and descriptions\n`;
      report += `6. Test with users who have disabilities\n\n`;

      report += `Generated by AccessScan - Free HTML Accessibility Scanner\n`;
      report += `For more information, visit: https://accessscan.com\n`;

      // Download the text report
      this.downloadTextFile(
        report,
        `accessibility-report-${new Date().toISOString().split("T")[0]}.txt`
      );

      console.log("Text report generated successfully");
      return true;
    } catch (error) {
      console.error("Error generating text report:", error);
      alert(`Error generating text report: ${error.message}`);
      return false;
    }
  }

  calculateSummary() {
    if (!this.data || !this.data.violations) {
      return {
        totalIssues: 0,
        critical: 0,
        serious: 0,
        moderate: 0,
        minor: 0,
      };
    }

    const summary = {
      critical: 0,
      serious: 0,
      moderate: 0,
      minor: 0,
      totalIssues: 0,
    };

    this.data.violations.forEach((violation) => {
      const nodeCount = violation.nodes ? violation.nodes.length : 1;
      summary.totalIssues += nodeCount;

      switch (violation.impact) {
        case "critical":
          summary.critical += nodeCount;
          break;
        case "serious":
          summary.serious += nodeCount;
          break;
        case "moderate":
          summary.moderate += nodeCount;
          break;
        case "minor":
          summary.minor += nodeCount;
          break;
      }
    });

    return summary;
  }

  downloadTextFile(content, filename) {
    const blob = new Blob([content], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }
}
